/** -*-Mode: ld-script; -*-
 * @file
 *
 * @ingroup bsp_linker
 *
 * @brief Linker command base file.
 */

/*
 * Copyright (c) 2008-2013 embedded brains GmbH.  All rights reserved.
 *
 *  embedded brains GmbH
 *  Obere Lagerstr. 30
 *  82178 Puchheim
 *  Germany
 *  <rtems@embedded-brains.de>
 *
 * The license and distribution terms for this file may be
 * found in the file LICENSE in this distribution or at
 * http://www.rtems.com/license/LICENSE.
 */

OUTPUT_FORMAT ("elf32-littlearm", "elf32-bigarm", "elf32-littlearm")

OUTPUT_ARCH (arm)

VENTRY = (RtsRegionStart + lnk_relocate);

ENTRY (VENTRY)

/*
 * Global symbols that may be defined externally
 */

bsp_vector_table_size = DEFINED (bsp_vector_table_size) ? bsp_vector_table_size : 64;

bsp_stack_align = DEFINED (bsp_stack_align) ? bsp_stack_align : 8;

bsp_stack_abt_size = DEFINED (bsp_stack_abt_size) ? bsp_stack_abt_size : 0;
bsp_stack_abt_size = ALIGN (bsp_stack_abt_size, bsp_stack_align);

bsp_stack_fiq_size = DEFINED (bsp_stack_fiq_size) ? bsp_stack_fiq_size : 0;
bsp_stack_fiq_size = ALIGN (bsp_stack_fiq_size, bsp_stack_align);

bsp_stack_irq_size = DEFINED (bsp_stack_irq_size) ? bsp_stack_irq_size : 0;
bsp_stack_irq_size = ALIGN (bsp_stack_irq_size, bsp_stack_align);

bsp_stack_svc_size = DEFINED (bsp_stack_svc_size) ? bsp_stack_svc_size : 0;
bsp_stack_svc_size = ALIGN (bsp_stack_svc_size, bsp_stack_align);

bsp_stack_und_size = DEFINED (bsp_stack_und_size) ? bsp_stack_und_size : 0;
bsp_stack_und_size = ALIGN (bsp_stack_und_size, bsp_stack_align);

bsp_stack_main_size = DEFINED (bsp_stack_main_size) ? bsp_stack_main_size : 0;
bsp_stack_main_size = ALIGN (bsp_stack_main_size, bsp_stack_align);

bsp_stack_all_size = bsp_stack_abt_size + bsp_stack_fiq_size + bsp_stack_irq_size + bsp_stack_svc_size + bsp_stack_und_size + bsp_stack_main_size;

bsp_processor_count = DEFINED (bsp_processor_count) ? bsp_processor_count : 1;


SECTIONS {
         /* Start of text segment. In order to generate a read-only text segment
            all the executable material used to make it must also be read-only.
            If there's trouble see if any of the output sections have flags WAX
            instead of AX.
          */
	. = ALIGN(SIZEOF_HEADERS, 16);

	.start : AT(ALIGN(RtsRegionStart + SIZEOF_HEADERS, 16)) {

                /* bsp_section_start_begin needed if exception vectors are in this section. */
		bsp_section_start_begin = .;
		KEEP (*(.bsp_start_text))
		KEEP (*(.bsp_start_data))
	}

	.text : ALIGN(32) {

		/* .text */
		*(.text.unlikely .text.*_unlikely)
		*(.text .stub .text.* .gnu.linkonce.t.*)
		/* .gnu.warning sections are handled specially by elf32.em.  */
		*(.gnu.warning)
		*(.glue_7t) *(.glue_7) *(.vfp11_veneer) *(.v4_bx)
	}

	.init : {
		/* .init */
		KEEP (*(.init))
	}

	.fini : {
		/* .fini */
		KEEP (*(.fini))
	}
    
	.plt : {
		/* .plt */
		*(.plt)
	}

        /* End of executable material. */

        /* Start of read-only data. You could break*/

	.rodata : ALIGN(32) {

		/* .rodata */
		*(.rodata .rodata.* .gnu.linkonce.r.*)
	}

	.rodata1 : {
		/* .rodata1 */
		*(.rodata1)
	}

	.ARM.extab : {
		/* .ARM.extab */
		*(.ARM.extab* .gnu.linkonce.armextab.*)
	}

	.eh_frame : {
		/* .eh_frame */
		KEEP (*(.eh_frame))
	}

	.gcc_except_table : {
		/* .gcc_except_table */
		*(.gcc_except_table .gcc_except_table.*)

	}

	.tdata : {
		_TLS_Data_begin = .;
		*(.tdata .tdata.* .gnu.linkonce.td.*)
		_TLS_Data_end = .;
	}
	.tbss : {
		_TLS_BSS_begin = .;
		*(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon)
		_TLS_BSS_end = .;
	}
	_TLS_Data_size = _TLS_Data_end - _TLS_Data_begin;
	_TLS_BSS_size = _TLS_BSS_end - _TLS_BSS_begin;
	_TLS_Size = _TLS_BSS_end - _TLS_Data_begin;
	_TLS_Alignment = ALIGNOF (.tdata);
    
	.note.gnu.build-id : {
		/* .note.gnu.build-id */
		*(.note.gnu.build-id)
	}

	.hash : {
		/* .hash */
		*(.hash)
	}

	.gnu.hash : {
		/* .gnu.hash */
		*(.gnu.hash)
	}

	.dynsym : {
		/* .dynsym */
		*(.dynsym)
	}

	.dynstr : {
		/* .dynstr */
		*(.dynstr)
	}

	.gnu.version : {
		/* .gnu.version */
		*(.gnu.version)
	}

	.gnu.version_d : {
		/* .gnu.version_d */
		*(.gnu.version_d)
	}

	.gnu.version_r : {
		/* .gnu.version_r */
		*(.gnu.version_r)
	}

	.rel.dyn : {
		/* .rel.dyn */
		*(.rel.init)
		*(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
		*(.rel.fini)
		*(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
		*(.rel.data.rel.ro* .rel.gnu.linkonce.d.rel.ro.*)
		*(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
		*(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
		*(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
		*(.rel.ctors)
		*(.rel.dtors)
		*(.rel.got)        

                /* Sections added by SEM for building shared libraries */
		*(.rel.init_array)
                *(.rel.fini_array)
		*(.relset_sysctl_set)
		*(.relset_domain_set)
                *(.relset_pseudo_set)
		*(.rel.ARM.extab*)
                *(.rel.bsp_start_text)
                *(.rel.bsp_start_data)
                /* End of added sections. */

		*(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
		*(.rel.iplt)
	}

	.rel.plt : {
		/* .rel.plt */
		*(.rel.plt)
	}

	.ARM.exidx : ALIGN(32) {
		/* .ARM.exidx */
		PROVIDE_HIDDEN(__exidx_start = .);
		*(.ARM.exidx* .gnu.linkonce.armexidx.*)
		PROVIDE_HIDDEN(__exidx_end = .);
	}





        /* Segment break. */
        . = ALIGN(CONSTANT(MAXPAGESIZE));





        /* Start of read/write data. */

        /* Startup code will generally need to know how to find these "array" sections
           so keep the PROVIDEs!
         */
	.preinit_array : {
		/* .preinit_array */
		PROVIDE_HIDDEN (__preinit_array_start = .);
		KEEP (*(.preinit_array))
		PROVIDE_HIDDEN (__preinit_array_end = .);
	}

	.init_array : {
		/* .init_array */
		PROVIDE_HIDDEN (__init_array_start = .);
		KEEP (*(SORT(.init_array.*)))
		KEEP (*(.init_array))
		PROVIDE_HIDDEN (__init_array_end = .);
	}

	.fini_array : {
		/* .fini_array */
		PROVIDE_HIDDEN (__fini_array_start = .);
		KEEP (*(.fini_array))
		KEEP (*(SORT(.fini_array.*)))
		PROVIDE_HIDDEN (__fini_array_end = .);
	}

	.data.rel.ro : {
		/* .data.rel.ro */
		*(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*)
		*(.data.rel.ro* .gnu.linkonce.d.rel.ro.*)
	}

	.jcr : {
		/* .jcr */
		KEEP (*(.jcr))
	}

	.dynamic : {
		/* .dynamic */
		*(.dynamic)
	}

	.iplt : {
		/* .iplt */
		*(.iplt)
	}

	.got : {
		/* .got */
		*(.got.plt) *(.igot.plt) *(.got) *(.igot)
	}
	.interp : {

		/* .interp */
		*(.interp)
	}

	.vector : {
                /* bsp_section_vector_* definitions will be needed if we move the
                   the exception vector table out of .start.
                */
		bsp_section_vector_begin = .;

		. = . + DEFINED (bsp_vector_table_in_start_section) ? 0 : bsp_vector_table_size;

		. = ALIGN (bsp_stack_align);

		bsp_stack_abt_begin = .;
		. = . + bsp_stack_abt_size;
		bsp_stack_abt_end = .;

		bsp_stack_fiq_begin = .;
		. = . + bsp_stack_fiq_size;
		bsp_stack_fiq_end = .;

		bsp_stack_irq_begin = .;
		. = . + bsp_stack_irq_size;
		bsp_stack_irq_end = .;

		bsp_stack_svc_begin = .;
		. = . + bsp_stack_svc_size;
		bsp_stack_svc_end = .;

		bsp_stack_und_begin = .;
		. = . + bsp_stack_und_size;
		bsp_stack_und_end = .;

		bsp_stack_main_begin = .;
		. = . + bsp_stack_main_size;
		bsp_stack_main_end = .;

		bsp_stack_secondary_processors_begin = .;
		. = . + (bsp_processor_count - 1) * bsp_stack_all_size;
		bsp_stack_secondary_processors_end = .;

		*(.bsp_vector)

                LONG(0)

		bsp_section_vector_end = .;
	}
	bsp_section_vector_size = bsp_section_vector_end - bsp_section_vector_begin;
	bsp_vector_table_begin = DEFINED (bsp_vector_table_in_start_section) ? bsp_section_start_begin : bsp_section_vector_begin;
	bsp_vector_table_end = bsp_vector_table_begin + bsp_vector_table_size;

	.data : ALIGN(32) {

		/* .data */
		*(.data .data.* .gnu.linkonce.d.*)
		SORT(CONSTRUCTORS)
	}

	.data1 : {
		/* .data1 */
		*(.data1)
	}

	.bss : {
                /* Startup code needs to know where .bss is so it can clear it. */
		bsp_section_bss_begin = .;

		/* .bss */
		*(.dynbss)
		*(.bss .bss.* .gnu.linkonce.b.*)
		*(COMMON)

		bsp_section_bss_end = .;
	}
	bsp_section_bss_size = bsp_section_bss_end - bsp_section_bss_begin;


        /* .fast_text and .fast_data are intended for stuff to be loaded into OCM. If you want
           to use this feature you should use AT() on these sections to put them in the right
           places. A segment break here would probably be desirable if the linker
           doesn't already make one.
        */
	.fast_text : {
		*(.bsp_fast_text)
	}

	.fast_data : ALIGN(32) {
		*(.bsp_fast_data)
	}


	/* Stabs debugging sections.  */
	.stab          0 : { *(.stab) }
	.stabstr       0 : { *(.stabstr) }
	.stab.excl     0 : { *(.stab.excl) }
	.stab.exclstr  0 : { *(.stab.exclstr) }
	.stab.index    0 : { *(.stab.index) }
	.stab.indexstr 0 : { *(.stab.indexstr) }
	.comment       0 : { *(.comment) }
	/* DWARF debug sections.
	   Symbols in the DWARF debugging sections are relative to the beginning
	   of the section so we begin them at 0.  */
	/* DWARF 1 */
	.debug          0 : { *(.debug) }
	.line           0 : { *(.line) }
	/* GNU DWARF 1 extensions */
	.debug_srcinfo  0 : { *(.debug_srcinfo) }
	.debug_sfnames  0 : { *(.debug_sfnames) }
	/* DWARF 1.1 and DWARF 2 */
	.debug_aranges  0 : { *(.debug_aranges) }
	.debug_pubnames 0 : { *(.debug_pubnames) }
	/* DWARF 2 */
	.debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
	.debug_abbrev   0 : { *(.debug_abbrev) }
	.debug_line     0 : { *(.debug_line) }
	.debug_frame    0 : { *(.debug_frame) }
	.debug_str      0 : { *(.debug_str) }
	.debug_loc      0 : { *(.debug_loc) }
	.debug_macinfo  0 : { *(.debug_macinfo) }
	/* SGI/MIPS DWARF 2 extensions */
	.debug_weaknames 0 : { *(.debug_weaknames) }
	.debug_funcnames 0 : { *(.debug_funcnames) }
	.debug_typenames 0 : { *(.debug_typenames) }
	.debug_varnames  0 : { *(.debug_varnames) }
	/* DWARF 3 */
	.debug_pubtypes 0 : { *(.debug_pubtypes) }
	.debug_ranges   0 : { *(.debug_ranges) }
	/* DWARF extension */
	.debug_macro    0 : { *(.debug_macro) }
	.ARM.attributes 0 : { KEEP (*(.ARM.attributes)) KEEP (*(.gnu.attributes)) }
	.note.gnu.arm.ident 0 : { KEEP (*(.note.gnu.arm.ident)) }
	/DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }

	/*
	 * This is a RTEMS specific section to catch all unexpected input
	 * sections.  In case you get an error like
	 *   "section `.unexpected_sections' will not fit in region
	 *   `UNEXPECTED_SECTIONS'"
	 * you have to figure out the offending input section and add it to the
	 * appropriate output section definition above.
	 */
	.unexpected_sections : { *(*) }
        ASSERT(!SIZEOF(.unexpected_sections), "There were unexpected input section types. Search for .unexpected in the linker map.")
}
